
---------------------------------------------------------------------------
--
-- intset.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/intset.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--      We are going to create a new type called 'intset' which represents
--      set of numbers.
--      A user-defined type must have an input and an output function, and
--      optionally can have binary input and output functions.  All of these
--      are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/intset$DLSUFFIX

-- the input function 'intset_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'intset'
-- does not exist yet but that's okay.

CREATE FUNCTION intset_in(cstring)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'intset_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION intset_out(intset)
   RETURNS cstring
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'intset_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION intset_recv(internal)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'intset_send' takes the internal representation
-- and converts it into a platform-independent bytea string.

CREATE FUNCTION intset_send(intset)
   RETURNS bytea
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need 32-byte int).

CREATE TYPE intset (
   internallength = 2000,
   input = intset_in,
   output = intset_out,
   receive = intset_recv,
   send = intset_send,
   alignment = int
);


-----------------------------
-- Using the new type:
--      user-defined types can be used like ordinary built-in types.
-----------------------------

--CREATE TABLE test_intset (
--      a       intset,
--      b       intset
--);

-- in-built test for intset

-- INSERT INTO test_intset VALUES ('{1,2,3,4,10}', '{2,3,4}');
-- INSERT INTO test_intset VALUES ('{5,6,7,8,11}', '{5,6,7,8,9,10}');
-- INSERT INTO test_intset VALUES ('{}', '{5,6,5,6,9,10}');
-- INSERT INTO test_intset VALUES ('{5,8,11}', '{5,8,11}');
-- INSERT INTO test_intset VALUES ('{1,1,1,1,1,1}', '{2,2,2,2,2,2}');
-- INSERT INTO test_intset VALUES ('{ 1 2 3 4 }', '{1}');
-- INSERT INTO test_intset VALUES ('{1, 2, 3, 4, five}', '{1}');
-- INSERT INTO test_intset VALUES ('{1, {2,3}, 4}', '{1}');
-- INSERT INTO test_intset VALUES ('{1 2 3 4}', '{1}');
-- INSERT INTO test_intset VALUES ('{5 , }', '{1}');


-- SELECT * FROM test_intset;

-----------------------------
-- Creating an operator for the new type:
--      Let's define an add operator for complex types. Since POSTGRES
--      supports function overloading, we'll use + as the add operator.
--      (Operator names can be reused with different numbers and types of
--      arguments.)
-----------------------------

-- first, define a function intset_minus (also in complex.c)
-- takes the set difference, and produces an intSet containing elements that are in A and not in B

CREATE FUNCTION intset_minus(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR - (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_minus,
   commutator = -
);

-- disjunnction function (!!)
-- takes the set disjunction, and produces an intSet containing elements that are in A and not in B, vice versa

CREATE FUNCTION intset_disjunction(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR !! (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_disjunction,
   commutator = !!
);

-- union function (||)
-- takes the set union, and produces an intSet containing all the elements of A and B

CREATE FUNCTION intset_union(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR || (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_union,
   commutator = ||
);

-- intersection function (&&)
-- takes the set intersection, and produces an intSet containing the elements common to A and B

CREATE FUNCTION intset_intersection(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR && (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_intersection,
   commutator = &&
);

-- equal function (=)
-- Every element of A can be found in B and vice versa

CREATE FUNCTION intset_equal(intset, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;


CREATE OPERATOR = (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_equal,
   commutator = =
);


-- subset function (@>)
-- Is A subset of B

CREATE FUNCTION intset_subset(intset, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @> (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_subset,
   commutator = @>
);

-- contains function (<@)
-- returns bool, does intset A contains integer i

CREATE FUNCTION intset_contains(integer, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR <@ (
   leftarg = integer,
   rightarg = intset,
   procedure = intset_contains,
   commutator = <@
);

-- cardinality function (@)
-- returns int,number of elements in A

CREATE FUNCTION intset_cardinality(intset)
   RETURNS int
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @ (
   rightarg = intset,
   procedure = intset_cardinality
);


-- sample testing
-- testing A-B
-- SELECT *, (a-b) diff FROM test_intset;

-- testing A!!B
-- SELECT *, (a!!b) disjoin FROM test_intset;

-- testing A||B
-- SELECT *, (a||b) t_union FROM test_intset;

-- testing A&&B
-- SELECT *, (a&&b) intersection FROM test_intset;

-- testing A&&B
-- SELECT *, (a=b) a_equal FROM test_intset;

-- testing A&&B
-- SELECT *, (a@>b) a_subset FROM test_intset;

-- testing A&&B
-- SELECT * FROM test_intset where 5 <@ b;

-- testing A&&B
-- SELECT *, @a , @b FROM test_intset;

-- clean up
-- DROP TABLE test_intset;
-- DROP TYPE intset CASCADE;
